pattern = "circle") +
stat_function(fun=function(x) dtruncnorm(x, mean = 0.5, sd = sd_val, a = lower, b = upper))+
theme_classic() +
labs(x = "Day time", y = "")+
theme(text = element_text(size = 22))
df_B <- data.frame(x = c(x_valsL,x_valsE), y = c(y_valsL,y_valsE))
Bimodal <- ggplot(df_B, aes(x = x, y = y)) +
geom_vline(xintercept = 0.3, linetype="dashed")+
stat_function(fun=function(x) dtruncnorm(x, mean = 0.15, sd = sd_val, a = lower, b = upper))+
stat_function(fun=function(x) dtruncnorm(x, mean = 0.5, sd = sd_val, a = lower, b = upper))+
theme_classic() +
labs(x = "Day time", y = "")+
theme(text = element_text(size = 22))
final_plot <- Early + Late + Bimodal+ plot_annotation(tag_levels = (tag_levels = list(c('B', 'C','D'), '1')))
final_plot
Bimodal <- ggplot(df_B, aes(x = x, y = y)) +
# geom_vline(xintercept = 0.3, linetype="dashed")+
stat_function(fun=function(x) dtruncnorm(x, mean = 0.4, sd = sd_val, a = lower, b = upper),colour = "red",linewidth = 2)+
stat_function(fun=function(x) dtruncnorm(x, mean = 0.5, sd = sd_val, a = lower, b = upper),colour = "blue",linewidth = 2)+
theme_classic() +
labs(x = "Day time", y = "")+
theme(text = element_text(size = 22))
#
# ggplot(as.data.frame(TT),aes(TT))+
#   geom_density() +
#   theme_classic()
# Define the mean, sd, lower, and upper values
mean_val <- 0.15
sd_val <- 0.05
lower <- 0
upper <- 1
# Create a sequence of x values
x_valsL1 <- seq(lower, upper, length.out = 100)
#
# Compute the corresponding y values using dtruncnorm
y_valsL1 <- c(dtruncnorm(x_valsL1, mean = 0.86, sd = sd_val, a = lower, b = upper),
dtruncnorm(x_valsL1, mean = 0.61, sd = sd_val, a = lower, b = upper))
# Create a data frame with these x and y values
df1 <- data.frame(x = x_valsL1, y = y_valsL1)
# Create the plot
Seasonal <- ggplot(df1, aes(x = x, y = y)) +
geom_vline(xintercept = 0.5, linetype="dashed")+
# geom_area_pattern(aes(pattern = "circle"),
#                   fill = "white",
#                   # pattern_fill = "black",
#                   pattern_density = 0.1,
#                   pattern_spacing = 0.02,
#                   pattern_size = 0.2,
#                   pattern = "circle") +
stat_function(fun=function(x) dtruncnorm(x, mean = 0.86, sd = sd_val, a = lower, b = upper)
+ dtruncnorm(x, mean = 0.61, sd = sd_val, a = lower, b = upper)
)+
dark_theme_bw() +
labs(x = "Time (seasonal)", y = "")+
theme(text = element_text(size = 22))
Bimodal <- ggplot(df_B, aes(x = x, y = y)) +
# geom_vline(xintercept = 0.3, linetype="dashed")+
stat_function(fun=function(x) dtruncnorm(x, mean = 0.4, sd = sd_val, a = lower, b = upper),colour = "red",linewidth = 2)+
stat_function(fun=function(x) dtruncnorm(x, mean = 0.5, sd = sd_val, a = lower, b = upper),colour = "blue",linewidth = 2)+
theme_classic() +
labs(x = "Day time", y = "")+
theme(text = element_text(size = 22))
Bimodal
list.files(path = "C:/Users/adm.violaine/Desktop/TIF/Test/FG23_19_to_041")
a <- list.files(path = "C:/Users/adm.violaine/Desktop/TIF/Test/FG23_19_to_041")
a
c("FG23_019_AD_D.png","FG23_019_AD_V.png")
library(recolorize)
library(png)
library(tiff)
library(openxlsx)
library(magick)
# images <- dir("C:/Users/adm.violaine/Desktop/TIF Morphos/Removed_BG", "tif", full.names = TRUE)
#
# for (i in 1:length(images)) {
#   im <- image_read(images[i])
#   image_write(im, path=paste("C:/Users/adm.violaine/Desktop/TIF Morphos/PNGS/",substring(images[i],54,64),".png",sep=""), format="png")
# }
SetColors <- c(0.11374, 0.11075, 0.11077, #noir
0.37200, 0.76895, 0.87073, #bleu
0.99, 0.99, 0.99, #blanc
0.36396, 0.32630, 0.25341, #marron
0.63430, 0.28020, 0.06344) #orange
# img <- readPNG("FG23_265_PG-1.png")
#
# img <- readPNG("FG23_276_AG-1.png") #ref
#
# init_fit <- recolorize(img, method = "hist", bins = 2,
#                        color_space = "sRGB")
#
# base_fit <- recluster(init_fit, cutoff = 30)
# base_fit <- thresholdRecolor(base_fit, pct = 0.05)
# colors <- refined_fit$centers
# img2 <- readPNG("FG23_019_AD-1.png")
#
# fit <- imposeColors(img, SetColors, adjust_centers = FALSE)
images <- dir("C:/Users/adm.violaine/Desktop/TIF Morphos/PNGS", "png", full.names = TRUE)
images <- dir("C:/Users/adm.violaine/Desktop/TIF Morphos/Linearized", "png", full.names = TRUE)
library(timeR)
library(patternize)
library(magick)
library(dplyr)
library(ggplot2)
library(readxl)
library(ggthemes)
library(scales)
library(ggpattern)
library(patchwork)
for (i in 1:length(images)) {
init_fit <- recolorize(images[[i]], method = "hist", bins = 3,
color_space = "sRGB")
}
images
images <- dir("C:/Users/adm.violaine/Desktop/TIF/Test/Removed_BG", "png", full.names = TRUE)
for (i in 1:length(images)) {
init_fit <- recolorize(images[[i]], method = "hist", bins = 3,
color_space = "sRGB")
}
for (i in 1:5) {
wb <- loadWorkbook("C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.csv")
Image <- suppressMessages(imposeColors(images[i], SetColors, adjust_centers = FALSE))
Colors <- round(Image$sizes/sum(Image$sizes),2)
writeData(wb, 1, x = Colors[1], startCol = 5, startRow = 1+i)
writeData(wb, 1, x = Colors[2], startCol = 6, startRow = 1+i)
writeData(wb, 1, x = Colors[3], startCol = 7, startRow = 1+i)
writeData(wb, 1, x = Colors[4], startCol = 8, startRow = 1+i)
writeData(wb, 1, x = Colors[5], startCol = 9, startRow = 1+i)
recolorize_to_png(Image, filename=paste("C:/Users/adm.violaine/Desktop/TIF/Test/Removed_BG/",substring(images[i],48,62),sep=""))
saveWorkbook(wb, "C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.csv", overwrite = TRUE)
# rc_list[[i]] <- suppressMessages(recluster(init_fit, cutoff = 30)$sizes)
}
for (i in 1:5) {
wb <- loadWorkbook("C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.xlsx")
Image <- suppressMessages(imposeColors(images[i], SetColors, adjust_centers = FALSE))
Colors <- round(Image$sizes/sum(Image$sizes),2)
writeData(wb, 1, x = Colors[1], startCol = 5, startRow = 1+i)
writeData(wb, 1, x = Colors[2], startCol = 6, startRow = 1+i)
writeData(wb, 1, x = Colors[3], startCol = 7, startRow = 1+i)
writeData(wb, 1, x = Colors[4], startCol = 8, startRow = 1+i)
writeData(wb, 1, x = Colors[5], startCol = 9, startRow = 1+i)
recolorize_to_png(Image, filename=paste("C:/Users/adm.violaine/Desktop/TIF/Test/Removed_BG/",substring(images[i],48,62),sep=""))
saveWorkbook(wb, "C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.xlsx", overwrite = TRUE)
# rc_list[[i]] <- suppressMessages(recluster(init_fit, cutoff = 30)$sizes)
}
for (i in 1:5) {
wb <- loadWorkbook("C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.xlsx")
Image <- suppressMessages(imposeColors(images[i], SetColors, adjust_centers = FALSE))
Colors <- round(Image$sizes/sum(Image$sizes),2)
writeData(wb, 1, x = Colors[1], startCol = 5, startRow = 1+i)
writeData(wb, 1, x = Colors[2], startCol = 6, startRow = 1+i)
writeData(wb, 1, x = Colors[3], startCol = 7, startRow = 1+i)
writeData(wb, 1, x = Colors[4], startCol = 8, startRow = 1+i)
writeData(wb, 1, x = Colors[5], startCol = 9, startRow = 1+i)
recolorize_to_png(Image, filename=paste("C:/Users/adm.violaine/Desktop/TIF/Test/Recolorize/",substring(images[i],55,69),sep=""))
saveWorkbook(wb, "C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.xlsx", overwrite = TRUE)
# rc_list[[i]] <- suppressMessages(recluster(init_fit, cutoff = 30)$sizes)
}
openXL("C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.xlsx")
library(dplyr)
library(ggplot2)
library(readxl)
library(ggthemes)
library(scales)
library(ggpattern)
library(patchwork)
library(recolorize)
library(png)
library(tiff)
library(openxlsx)
library(magick)
SetColors <- c(0.11374, 0.11075, 0.11077, #noir
0.37200, 0.76895, 0.87073, #bleu
0.99, 0.99, 0.99, #blanc
0.36396, 0.32630, 0.25341, #marron
0.63430, 0.28020, 0.06344) #orange
library(timeR)
library(patternize)
library(magick)
images <- dir("C:/Users/adm.violaine/Desktop/TIF/Test/Removed_BG", "png", full.names = TRUE)
for (i in 1:length(images)) {
wb <- loadWorkbook("C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.xlsx")
Image <- suppressMessages(imposeColors(images[i], SetColors, adjust_centers = FALSE))
Colors <- round(Image$sizes/sum(Image$sizes),2)
writeData(wb, 1, x = Colors[1], startCol = 5, startRow = 1+i)
writeData(wb, 1, x = Colors[2], startCol = 6, startRow = 1+i)
writeData(wb, 1, x = Colors[3], startCol = 7, startRow = 1+i)
writeData(wb, 1, x = Colors[4], startCol = 8, startRow = 1+i)
writeData(wb, 1, x = Colors[5], startCol = 9, startRow = 1+i)
recolorize_to_png(Image, filename=paste("C:/Users/adm.violaine/Desktop/TIF/Test/Recolorize/",substring(images[i],55,69),sep=""))
saveWorkbook(wb, "C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.xlsx", overwrite = TRUE)
# rc_list[[i]] <- suppressMessages(recluster(init_fit, cutoff = 30)$sizes)
}
# Load your data
df <- read.csv('C:/Users/adm.violaine/Downloads/plot_2D.csv',sep=";")
df$alpha <- as.numeric(df$alpha)
# Create a combined heatmap with different colors for each state
ggplot(df, aes(x = gamma, y = alpha)) +
geom_bin2d(bins = 1000, aes(fill = state)) +  # Use 'state' for color mapping
scale_fill_manual(values = c("red", "green", "blue","yellow")) +  # Define colors for states
labs(title = "Combined 2D Heatmap with Multiple Zones", x = "gamma", y = "alpha") +
theme_minimal()+
theme(text = element_text(size = 17))
# Load necessary libraries
library(ggplot2)
# Load your data
df <- read.csv('C:/Users/adm.violaine/Downloads/plot_2D.csv',sep=";")
df$alpha <- as.numeric(df$alpha)
# Create a combined heatmap with different colors for each state
ggplot(df, aes(x = gamma, y = alpha)) +
geom_bin2d(bins = 1000, aes(fill = state)) +  # Use 'state' for color mapping
scale_fill_manual(values = c("red", "green", "blue","yellow")) +  # Define colors for states
labs(title = "Combined 2D Heatmap with Multiple Zones", x = "gamma", y = "alpha") +
theme_minimal()+
theme(text = element_text(size = 17))
# Load necessary libraries
library(ggplot2)
# Load your data
df <- read.csv('C:/Users/adm.violaine/Downloads/plot_2D.csv',sep=";")
df$alpha <- as.numeric(df$alpha)
# Create a combined heatmap with different colors for each state
ggplot(df, aes(x = gamma, y = alpha)) +
geom_bin2d(bins = 1000, aes(fill = state)) +  # Use 'state' for color mapping
scale_fill_manual(values = c("red", "green", "blue","yellow")) +  # Define colors for states
labs(title = "Combined 2D Heatmap with Multiple Zones", x = "gamma", y = "alpha") +
theme_minimal()+
theme(text = element_text(size = 17))
# Load necessary libraries
library(ggplot2)
# Load your data
df <- read.csv('C:/Users/adm.violaine/Downloads/plot_2D.csv',sep=";")
df$alpha <- as.numeric(df$alpha)
# Create a combined heatmap with different colors for each state
ggplot(df, aes(x = gamma, y = alpha)) +
geom_bin2d(bins = 1000, aes(fill = state)) +  # Use 'state' for color mapping
scale_fill_manual(values = c("red", "green", "blue","yellow")) +  # Define colors for states
labs(title = "Combined 2D Heatmap with Multiple Zones", x = "gamma", y = "alpha") +
theme_minimal()+
theme(text = element_text(size = 17))
ggsave("heatmap.png", width = 10, height = 10)
# Load necessary libraries
library(ggplot2)
# Load your data
df <- read.csv('C:/Users/adm.violaine/Downloads/plot_2D.csv',sep=";")
df$alpha <- as.numeric(df$alpha)
# Create a combined heatmap with different colors for each state
ggplot(df, aes(x = gamma, y = alpha)) +
geom_bin2d(bins = 1000, aes(fill = state)) +  # Use 'state' for color mapping
scale_fill_manual(values = c("red", "green", "blue","yellow")) +  # Define colors for states
labs(title = "Combined 2D Heatmap with Multiple Zones", x = "gamma", y = "alpha") +
theme_minimal()+
theme(text = element_text(size = 17))
# Create a combined heatmap with different colors for each state
ggplot(df, aes(x = gamma, y = alpha)) +
geom_bin2d(bins = 1000, aes(fill = state)) +  # Use 'state' for color mapping
scale_fill_manual(values = c("coral1", "darkviolet", "aquamarine","black")) +  # Define colors for states
labs(title = "Combined 2D Heatmap with Multiple Zones", x = "gamma", y = "alpha") +
theme_minimal()+
theme(text = element_text(size = 17))
# Create a combined heatmap with different colors for each state
ggplot(df, aes(x = gamma, y = alpha)) +
geom_bin2d(bins = 1000, aes(fill = state)) +  # Use 'state' for color mapping
scale_fill_manual(values = c("darkviolet", "yellow", "aquamarine","black")) +  # Define colors for states
labs(title = "Combined 2D Heatmap with Multiple Zones", x = "gamma", y = "alpha") +
theme_minimal()+
theme(text = element_text(size = 17))
# Create a combined heatmap with different colors for each state
ggplot(df, aes(x = gamma, y = alpha)) +
geom_bin2d(bins = 1000, aes(fill = state)) +  # Use 'state' for color mapping
scale_fill_manual(values = c("chartreuse4", "cornsilk", "darkolivegreen1","orange")) +  # Define colors for states
labs(title = "Combined 2D Heatmap with Multiple Zones", x = "gamma", y = "alpha") +
theme_minimal()+
theme(text = element_text(size = 17))
for (i in 1:length(images)) {
if (substring(images[i], 67, 67) == "D") {
wb <- loadWorkbook("C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.xlsx")
Image <- suppressMessages(imposeColors(images[i], SetColors, adjust_centers = FALSE, plotting=TRUE))
Colors <- round(Image$sizes/sum(Image$sizes),2)
# print(Colors)
writeData(wb, 1, x = max(Colors[1],0.03), startCol = 6, startRow = i)
writeData(wb, 1, x = max(Colors[2],0.03), startCol = 7, startRow = i)
writeData(wb, 1, x = max(Colors[3],0.03), startCol = 8, startRow = i)
writeData(wb, 1, x = max(Colors[4],0.03), startCol = 9, startRow = i)
writeData(wb, 1, x = max(Colors[5],0.03), startCol = 10, startRow = i)
# recolorize_to_png(Image, filename=paste("C:/Users/adm.violaine/Desktop/TIF/Test/Recolorize/",substring(images[i],55,68),"png",sep=""))
saveWorkbook(wb, "C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.xlsx", overwrite = TRUE)
# rc_list[[i]] <- suppressMessages(recluster(init_fit, cutoff = 30)$sizes)
}
}
library(dplyr)
library(ggplot2)
library(readxl)
library(ggthemes)
library(scales)
library(ggpattern)
library(patchwork)
library(recolorize)
library(png)
library(tiff)
library(openxlsx)
library(magick)
library(patternize)
library(magick)
images <- dir("C:/Users/adm.violaine/Desktop/TIF/Test/Removed_BG/", "png", full.names = TRUE)
#DORSAL
SetColors <- c(0.11374, 0.11075, 0.11077, #noir
0.37200, 0.76895, 0.87073, #bleu
0.99, 0.99, 0.99, #blanc
0.36396, 0.32630, 0.25341, #marron
0.63430, 0.28020, 0.06344) #orange
for (i in 1:length(images)) {
if (substring(images[i], 67, 67) == "D") {
wb <- loadWorkbook("C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.xlsx")
Image <- suppressMessages(imposeColors(images[i], SetColors, adjust_centers = FALSE, plotting=TRUE))
Colors <- round(Image$sizes/sum(Image$sizes),2)
# print(Colors)
writeData(wb, 1, x = max(Colors[1],0.03), startCol = 6, startRow = i)
writeData(wb, 1, x = max(Colors[2],0.03), startCol = 7, startRow = i)
writeData(wb, 1, x = max(Colors[3],0.03), startCol = 8, startRow = i)
writeData(wb, 1, x = max(Colors[4],0.03), startCol = 9, startRow = i)
writeData(wb, 1, x = max(Colors[5],0.03), startCol = 10, startRow = i)
# recolorize_to_png(Image, filename=paste("C:/Users/adm.violaine/Desktop/TIF/Test/Recolorize/",substring(images[i],55,68),"png",sep=""))
saveWorkbook(wb, "C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.xlsx", overwrite = TRUE)
# rc_list[[i]] <- suppressMessages(recluster(init_fit, cutoff = 30)$sizes)
}
}
1%2
1%%2
3%%2
n = 1
for (i in 1:length(images)) {
if (substring(images[i], 67, 67) == "D") {
wb <- loadWorkbook("C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.xlsx")
Image <- suppressMessages(imposeColors(images[i], SetColors, adjust_centers = FALSE, plotting=FALSE))
Colors <- round(Image$sizes/sum(Image$sizes),2)
# print(Colors)
writeData(wb, 1, x = max(Colors[1],0.03), startCol = 6, startRow = n)
writeData(wb, 1, x = max(Colors[2],0.03), startCol = 7, startRow = n)
writeData(wb, 1, x = max(Colors[3],0.03), startCol = 8, startRow = n)
writeData(wb, 1, x = max(Colors[4],0.03), startCol = 9, startRow = n)
writeData(wb, 1, x = max(Colors[5],0.03), startCol = 10, startRow = n)
n+=1
n+=1
n = n+1
n = 1
for (i in 1:length(images)) {
if (substring(images[i], 67, 67) == "D") {
wb <- loadWorkbook("C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.xlsx")
Image <- suppressMessages(imposeColors(images[i], SetColors, adjust_centers = FALSE, plotting=FALSE))
Colors <- round(Image$sizes/sum(Image$sizes),2)
# print(Colors)
writeData(wb, 1, x = max(Colors[1],0.03), startCol = 6, startRow = n)
writeData(wb, 1, x = max(Colors[2],0.03), startCol = 7, startRow = n)
writeData(wb, 1, x = max(Colors[3],0.03), startCol = 8, startRow = n)
writeData(wb, 1, x = max(Colors[4],0.03), startCol = 9, startRow = n)
writeData(wb, 1, x = max(Colors[5],0.03), startCol = 10, startRow = n)
n = n+1
# recolorize_to_png(Image, filename=paste("C:/Users/adm.violaine/Desktop/TIF/Test/Recolorize/",substring(images[i],55,68),"png",sep=""))
saveWorkbook(wb, "C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.xlsx", overwrite = TRUE)
# rc_list[[i]] <- suppressMessages(recluster(init_fit, cutoff = 30)$sizes)
}
}
n = 2
for (i in 1:length(images)) {
if (substring(images[i], 67, 67) == "D") {
wb <- loadWorkbook("C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.xlsx")
Image <- suppressMessages(imposeColors(images[i], SetColors, adjust_centers = FALSE, plotting=FALSE))
Colors <- round(Image$sizes/sum(Image$sizes),2)
# print(Colors)
writeData(wb, 1, x = max(Colors[1],0.03), startCol = 6, startRow = n)
writeData(wb, 1, x = max(Colors[2],0.03), startCol = 7, startRow = n)
writeData(wb, 1, x = max(Colors[3],0.03), startCol = 8, startRow = n)
writeData(wb, 1, x = max(Colors[4],0.03), startCol = 9, startRow = n)
writeData(wb, 1, x = max(Colors[5],0.03), startCol = 10, startRow = n)
n = n+1
# recolorize_to_png(Image, filename=paste("C:/Users/adm.violaine/Desktop/TIF/Test/Recolorize/",substring(images[i],55,68),"png",sep=""))
saveWorkbook(wb, "C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.xlsx", overwrite = TRUE)
# rc_list[[i]] <- suppressMessages(recluster(init_fit, cutoff = 30)$sizes)
}
}
n = 2
for (i in 1:length(images)) {
if (substring(images[i], 67, 67) == "D") {
wb <- loadWorkbook("C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.xlsx")
Image <- suppressMessages(imposeColors(images[i], SetColors, adjust_centers = FALSE, plotting=FALSE))
Colors <- round(Image$sizes/sum(Image$sizes),2)
# print(Colors)
writeData(wb, 1, x = Colors[1], startCol = 6, startRow = n)
writeData(wb, 1, x = Colors[2], startCol = 7, startRow = n)
writeData(wb, 1, x = Colors[3], startCol = 8, startRow = n)
writeData(wb, 1, x = Colors[4], startCol = 9, startRow = n)
writeData(wb, 1, x = Colors[5], startCol = 10, startRow = n)
n = n+1
# recolorize_to_png(Image, filename=paste("C:/Users/adm.violaine/Desktop/TIF/Test/Recolorize/",substring(images[i],55,68),"png",sep=""))
saveWorkbook(wb, "C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.xlsx", overwrite = TRUE)
# rc_list[[i]] <- suppressMessages(recluster(init_fit, cutoff = 30)$sizes)
}
}
images <- dir("C:/Users/adm.violaine/Desktop/TIF/Test/Removed_BG/", "png", full.names = TRUE)
SetColors <- c(0.20315, 0.16009, 0.15040, #marron foncé
0.68515, 0.63125, 0.50269,#beige
0.73, 0.74, 0.70, #blanc
0.38506, 0.27395, 0.20174, #marron
0.60, 0.26010, 0.16855) #rouge
n = 375
for (i in 1:length(images)) {
if (substring(images[i], 67, 67) == "V") {
wb <- loadWorkbook("C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.xlsx")
Image <- suppressMessages(imposeColors(images[i], SetColors, adjust_centers = FALSE,plotting=FALSE))
Colors <- round(Image$sizes/sum(Image$sizes),2)
writeData(wb, 1, x = max(Colors[1],0.03), startCol = 11, startRow = n)
writeData(wb, 1, x = max(Colors[2],0.03), startCol = 12, startRow = n)
writeData(wb, 1, x = max(Colors[3],0.03), startCol = 8, startRow = n)
writeData(wb, 1, x = max(Colors[4],0.03), startCol = 9, startRow = n)
writeData(wb, 1, x = max(Colors[5],0.03), startCol = 13, startRow = n)
n = n+1
# recolorize_to_png(Image, filename=paste("C:/Users/adm.violaine/Desktop/TIF/Test/Recolorize/",substring(images[i],55,68),"png",sep=""))
saveWorkbook(wb, "C:/Users/adm.violaine/Desktop/TIF/Wing_size_colorchecker.xlsx", overwrite = TRUE)
# rc_list[[i]] <- suppressMessages(recluster(init_fit, cutoff = 30)$sizes)
}
}
Succès = 82
Total = 100
donnees_binomiales <- c(rep(0,Total-Succès), rep(1, Succès))
# Estimation de la probabilité de succès à partir des données
prob_succes <- mean(Succès/Total)
# Calcul de l'écart-type empirique
ecart_type_empirique <- sqrt(prob_succes * (1 - prob_succes) / length(donnees_binomiales))
# Affichage de la probabilité de succès et de l'écart-type empirique
cat("Probabilité de succès estimée :", prob_succes, "\n")
cat("Écart-type empirique :", ecart_type_empirique, "\n")
Succès = 81
Total = 100
donnees_binomiales <- c(rep(0,Total-Succès), rep(1, Succès))
# Estimation de la probabilité de succès à partir des données
prob_succes <- mean(Succès/Total)
# Calcul de l'écart-type empirique
ecart_type_empirique <- sqrt(prob_succes * (1 - prob_succes) / length(donnees_binomiales))
# Affichage de la probabilité de succès et de l'écart-type empirique
cat("Probabilité de succès estimée :", prob_succes, "\n")
cat("Écart-type empirique :", ecart_type_empirique, "\n")
Succès = 75
Total = 100
donnees_binomiales <- c(rep(0,Total-Succès), rep(1, Succès))
# Estimation de la probabilité de succès à partir des données
prob_succes <- mean(Succès/Total)
# Calcul de l'écart-type empirique
ecart_type_empirique <- sqrt(prob_succes * (1 - prob_succes) / length(donnees_binomiales))
# Affichage de la probabilité de succès et de l'écart-type empirique
cat("Probabilité de succès estimée :", prob_succes, "\n")
cat("Écart-type empirique :", ecart_type_empirique, "\n")
Succès = 81
Total = 100
donnees_binomiales <- c(rep(0,Total-Succès), rep(1, Succès))
# Estimation de la probabilité de succès à partir des données
prob_succes <- mean(Succès/Total)
# Calcul de l'écart-type empirique
ecart_type_empirique <- sqrt(prob_succes * (1 - prob_succes) / length(donnees_binomiales))
# Affichage de la probabilité de succès et de l'écart-type empirique
cat("Probabilité de succès estimée :", prob_succes, "\n")
cat("Écart-type empirique :", ecart_type_empirique, "\n")
Succès = 89
Total = 100
donnees_binomiales <- c(rep(0,Total-Succès), rep(1, Succès))
# Estimation de la probabilité de succès à partir des données
prob_succes <- mean(Succès/Total)
# Calcul de l'écart-type empirique
ecart_type_empirique <- sqrt(prob_succes * (1 - prob_succes) / length(donnees_binomiales))
# Affichage de la probabilité de succès et de l'écart-type empirique
cat("Probabilité de succès estimée :", prob_succes, "\n")
cat("Écart-type empirique :", ecart_type_empirique, "\n")
Succès = 76
Total = 100
donnees_binomiales <- c(rep(0,Total-Succès), rep(1, Succès))
# Estimation de la probabilité de succès à partir des données
prob_succes <- mean(Succès/Total)
# Calcul de l'écart-type empirique
ecart_type_empirique <- sqrt(prob_succes * (1 - prob_succes) / length(donnees_binomiales))
# Affichage de la probabilité de succès et de l'écart-type empirique
cat("Probabilité de succès estimée :", prob_succes, "\n")
cat("Écart-type empirique :", ecart_type_empirique, "\n")
Succès = 76
Total = 100
Succès/Total
mean(Succès/Total)
library(ggplot2)
library(dplyr)
library(readxl)
library(ggpattern)
library(truncnorm)
library(patchwork)
library(tidyverse)
setwd("C:/Users/adm.violaine/Desktop/Data and graphs")
G <- read_excel("Supplementary_data.xlsx", sheet = 'Base_G')
G$G <- as.factor(G$G)
p1 <- ggplot(data=G, aes(G))+
geom_bar(aes(weight = linkage_percent), position="dodge")+
xlab("G") + ylab("Percentage of simulations\ndisplaying linkage disequilibrium")+
geom_errorbar(aes(ymin=linkage_percent-sd_link_p*100, ymax=linkage_percent+sd_link_p*100), width=.4)+
theme_classic()+
theme(text = element_text(size = 15))+
scale_fill_grey()+
theme(legend.position = "none")
p2 <- ggplot(data=G, aes(G))+
geom_bar(aes(weight = linkage_number), position="dodge")+
xlab("G") + ylab("Average number of loci\nexhibiting linkage disequilibrium")+
geom_errorbar(aes(ymin=linkage_number-sd_link_n, ymax=linkage_number+sd_link_n), width=.4)+
theme_classic()+
theme(text = element_text(size = 15))+
scale_fill_grey()+
theme(legend.position = "none")
fplot <- p1 + p2 + plot_annotation(tag_levels = "A")
fplot
